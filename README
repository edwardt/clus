

To download
===========

1. Get and install Repo

    $ curl http://android.git.kernel.org/repo > ~/bin/repo
    $ chmod a+x ~/bin/repo

2. Create working directory

    $ mkdir working-directory-name
    $ cd working-directory-name
    $ repo init -u git://github.com/norton/manifests.git -m  clus-default.xml

3. Download Git repositories

    $ cd working-directory-name
    $ repo sync


For futher information and help for related tools, please refer to the
following links:

- Erlang - http://www.erlang.org/
  * *R14B01 has been tested most recently*
  * *R13B01 or newer*
- Git - http://git-scm.com/
  * *Git 1.5.4 or newer*
  * _required for Repo and GitHub_
- GitHub - https://github.com
- Python - http://www.python.org
  * *Python 2.4 or newer (CAUTION: Python 3.x might be too new)*
  * _required for Repo_
- Rebar - https://github.com/basho/rebar/wiki
- Repo - http://source.android.com/source/git-repo.html


To build - basic recipe
=======================

1. Get and install an erlang system
   http://www.erlang.org

2. Build UBF
   $ cd working-directory-name/src
   $ make compile

3. Run the unit tests
   $ cd working-directory-name/src
   $ make eunit


To build - optional features
============================

A. Dialyzer Testing _basic recipe_

   A.1. Build Dialyzer's PLT _(required once)_

   $ cd working-directory-name/src
   $ make build-plt

   TIP: Check Makefile and dialyzer's documentation for further
   information.

   A.2. Dialyze without specs

   $ cd working-directory-name/src
   $ make dialyze

   CAUTION: If you manually run dialyzer with the "-r" option, execute
   "make clean compile" first to avoid finding duplicate beam files
   underneath rebar's .eunit directory.  Check Makefile for further
   information.

   A.3. Dialyze with specs

   $ cd working-directory-name/src
   $ make dialyze-spec


To Setup a Hibari Cluster
=========================

Assumptions:

- 3 target nodes (node1, node2, node3)
  * Your login account ($USER) exists with sudo access enabled
  * Your login account ($USER) is accessible by ssh and password-based
    login is not required
  * Erlang, Git, and Python is installed
  * `hostname -s` equals nodeX for each node respectively
  * Network A and Network B is setup and active

1. Create (or re-create) hibari user on target nodes
   $ cd working-directory-name
   $ for i in node1 node2 node3 ; do ./src/lib/clus/priv/clus.sh -f init hibari $i ; done
hibari@node1
hibari@node2
hibari@node3

   CAUTION: The -f option will forcefully delete and then re-create
   the hibari user on the target node.

2. Download, Build, and Setup hibari package on target nodes
   $ cd working-directory-name
   $ ./src/lib/clus/priv/clus-hibari.sh -f init /usr/local/lib/erlang hibari node1 node2 node3


